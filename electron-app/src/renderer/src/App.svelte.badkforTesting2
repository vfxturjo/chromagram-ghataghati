<script lang="ts">
  // import { onMount } from 'svelte'
  import ChromagramCalculator from './assets/bingPower/part2 2 Class'

  let canvas
  let chromagramValues = []

  const chromagramCalculator = new ChromagramCalculator()

  // Initialize the audio context and media stream
  const audioContext = new AudioContext()
  let mediaStream

  async function startRecording() {
    try {
      mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const source = audioContext.createMediaStreamSource(mediaStream)

      // Connect the audio source to the analyzer node
      const analyzer = audioContext.createAnalyser()
      source.connect(analyzer)

      // Set up the analyzer parameters
      analyzer.fftSize = 4096
      const bufferLength = analyzer.frequencyBinCount
      const dataArray = new Uint8Array(bufferLength)

      // Start the animation loop
      requestAnimationFrame(updateCanvas)

      function updateCanvas() {
        analyzer.getByteFrequencyData(dataArray)

        // Convert frequency data to chromagram values
        const audioSamples = Array.from(dataArray).map((value) => value / 255)
        chromagramCalculator.addToBuffer(audioSamples)
        chromagramValues = chromagramCalculator.calculateChromagram()

        // Draw the chromagram on the canvas
        drawChromagram()

        requestAnimationFrame(updateCanvas)
      }
    } catch (error) {
      console.error('Error starting recording:', error)
    }
  }

  function stopRecording() {
    if (mediaStream) {
      mediaStream.getTracks().forEach((track) => track.stop())
    }
  }

  function drawChromagram() {
    const ctx = canvas.getContext('2d')
    const canvasWidth = canvas.width
    const canvasHeight = canvas.height

    // Clear the canvas
    ctx.clearRect(0, 0, canvasWidth, canvasHeight)

    // Draw the chromagram bars
    const numBins = chromagramValues.length
    const barWidth = canvasWidth / numBins

    for (let i = 0; i < numBins; i++) {
      const value = chromagramValues[i]
      const barHeight = value * canvasHeight

      ctx.fillStyle = `rgba(0, 0, 255, ${value})` // Blue color
      ctx.fillRect(i * barWidth, canvasHeight - barHeight, barWidth, barHeight)
    }
  }
</script>

<canvas bind:this={canvas} width="400" height="200"></canvas>
<button on:click={startRecording}>Start Recording</button>
<button on:click={stopRecording}>Stop Recording</button>
